/*
 * core.gradle
 *
 * Sub-project of Jython: interpreter core. We to generate and compile the
 * implementation of the core Python objects, exporting a minimal API.
 */

plugins {
    id 'java-library'
}

dependencies {
    //implementation 'org.ow2.asm:asm:9.+'

    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.+'
}


test {
    useJUnitPlatform {  // JUnit5 as standard
        includeEngines 'junit-jupiter'
    }
}


// Sources and destinations when generating Java object implementations

def genSourcesDir = "$buildDir/generated/sources"
def genOutputDir = "$genSourcesDir/javaTemplate"
def genJavaDir = "$genOutputDir/java/main"
def genTestJavaDir = "$genOutputDir/java/test"

def genInputDir = getProject().file('src/main/javaTemplate')
def genTestInputDir = getProject().file('src/test/javaTemplate')


// Source and destinations of Python source test material

// We compile these to code objects to test the CPython interpreter.
def testPythonExampleInputDir = getProject().file('src/test/pythonExample')

def pythonExampleOutput = "$buildDir/generated/sources/pythonExample"
def testPythonExampleOutputDir = "$pythonExampleOutput/test"


sourceSets {

    main {
        java {
            srcDir genJavaDir
        }
    }

    test {
        java {
            srcDir genTestJavaDir
        }
        resources {
            srcDir testPythonExampleOutputDir
        }
    }
}



// A task that runs Python with the tools library on the path

class PythonExec extends Exec {

    PythonExec() {
        executable 'python'
        environment('PYTHONPATH', getProject().getRootProject().file(
                'build-tools/python/lib'))
    }
}


// Generate Python object definitions

task generateObjectDefinitions(type: PythonExec,
        description: 'Generate object definitions from templates' ) {
    args getProject().getRootProject().file(
            'build-tools/python/tool/java_object_gen.py')
    args '--verbose'
    args genInputDir
    args genJavaDir
}
compileJava.dependsOn(generateObjectDefinitions)


// Report the version of Python available

task pythonVersion(type: PythonExec) {
    args '-V'
}
generateObjectDefinitions.dependsOn(pythonVersion)


// Copy and compile Python source examples to the build tree

task compileTestPythonExamples(type: PythonExec,
        description: 'Copy and compile Python test examples') {
    // Clues for the incremental build
    inputs.files(
        fileTree(testPythonExampleInputDir) {
            include '**/*.py'
        })
    outputs.dir(testPythonExampleOutputDir)
    // Exec task is python -m compile_examples <src> <dst>
    args '-m'
    args 'compile_examples'
    args testPythonExampleInputDir
    args testPythonExampleOutputDir
}
processTestResources.dependsOn(compileTestPythonExamples)


// Some adjustments to Javadoc to ensure complex tables readable

tasks.withType(Javadoc) {

    options.showFromPackage()

    // addStringOption inserts one "-" for us :/
    // CSS adjustments (initially only for table style)
    options.addStringOption("-add-stylesheet",
        "src/main/javadoc/project-styles.css")

    // Enable "custom" tags used in JDK Javadoc since JSR-335.
    // https://nipafx.dev/javadoc-tags-apiNote-implSpec-implNote
    options.tags(
        "apiNote:a:API Note:",
        "implSpec:a:Implementation Requirements:",
        "implNote:a:Implementation Note:",
        // Unfortunately we must add these standard tags too,
        // so they come after the ones we want to enable.
        "param", "return", "throws",
        "since", "version", "serialData", "see")
}


// Particular things we ask of the compiler in this sub-project.
// See also ~/build.gradle for tweaks applying to all projects.

tasks.withType(JavaCompile) {
    // retain parameter names (for use by exposer)
    options.compilerArgs.add('-parameters')
}

