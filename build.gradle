/*
 * build.gradle
 *
 * Build file for the Jython Project, a multi-project build.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
}

// ---------------- Determine the version of Jython ----------------------------

/*
 * This one string will be used to name the generated JAR and version-stamp the
 * application. It should be all you have to edit to version a release built
 * here. But of course you have to do it the hard way too (see build.xml) as
 * long as Ant is also used.
 *
 * The convention here is that you specify the version of the *next* release. If
 * there are files not checked in, extra files (not of types git ignores), or the
 * changeset is not tagged correspondingly, the build will add "-SNAPSHOT" to
 * the effective version.
 */
// Versions are specified in this grammar:
// <major> . <minor> ( . <micro> )? ( <release> <serial> )? ( - <word> )?

version = '3.11.0a1'

// Valid examples (please preserve in comments):
//version = '2.7.2a2'
//version = '2.7.2b2-DEV'
//version = '2.7.2b1'
//version = '2.7.2rc1'
//version = '2.7.2'

group = 'org.python'

// ---------------- Miscellaneous configuration --------------------------------

allprojects {

    apply plugin: 'java'
    // We support Java 11 onwards officially.
    sourceCompatibility = '17'

    // Same configuiration all sub-projects
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.debug = true

        // deprecation is noisy
        options.deprecation = true

        // Use only public API
        options.compilerArgs.addAll(['--release', '17'])
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        options.showFromPackage()
    }

    repositories {
        mavenLocal()
        // Jython is distributed through Maven Central. Get our dependencies there too.
        mavenCentral()
    }
}

// ---------------- Version-related file generation ----------------------------
//
// Use the same mechanism as Jython 2 when we are ready.
